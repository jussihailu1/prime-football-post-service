variables:
- name: BuildParameters.tasks
  value: build

trigger:
- main

name: $(date:yyyyMMdd)$(rev:.r)

resources:
- repo: self

stages:
- stage: Gradle_Build_And_SonarQube
  displayName: Gradle build + SonarQube
  pool:
    name: Default
  jobs:
  - job: GradleBuild_And_SonarQube
    displayName: Gradle build + SonarQube
    steps:
    - checkout: self
    - task: SonarQubePrepare@5
      displayName: Prepare analysis on SonarQube
      inputs:
        SonarQube: f7d0c74c-b862-4a5a-8f53-3725c90c7a82
        scannerMode: Other
        extraProperties: sonar.projectKey=Prime_Football_prime-football-post-service_AYFjFsGf_FqXVwF7BJxB
    - task: Gradle@2
      displayName: gradlew build
      inputs:
        wrapperScript: post-service/gradlew
        cwd: post-service
        tasks: $(BuildParameters.tasks)
        sqAnalysisEnabled: true
        sqGradlePluginVersionChoice: build
    - task: SonarQubePublish@5
      displayName: Publish Quality Gate Result

- stage: DockerContainer_Build_And_Push
  displayName: Docker container build and push [Docker Hub & ACR]
  dependsOn: Gradle_Build_And_SonarQube
  pool:
    vmImage: 'ubuntu-latest'
  jobs:  
  - job: 
    displayName: Docker Hub build and push
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: jussihailu/prime-football_post-service
        dockerfile: '**/Dockerfile'
        containerRegistry: 'Prime Football Post-service Docker Hub connection'
        tags: Build.BuildId
    - publish: manifests 

# - stage: Snyk_Scan
#   displayName: Snyk scan for dependency and dockerfile vulnerabilities
#   pool:
#     vMImage: 'ubuntu-latest'
#   jobs:
#     - job:
#       displayName: Snyk scan dependencies
#       steps:
#         - task: SnykSecurityScan@1
#           inputs:
#             serviceConnectionEndpoint: 'Prime Football Post-service Snyk connection'
#             testType: app
#             monitorWhen: always
#             failOnIssues: false
#     - job:
#       displayName: Snyk scan container
#       steps:
#         - task: SnykSecurityScan@1
#           inputs:
#             serviceConnectionEndpoint: 'Prime Football Post-service Snyk connection'
#             testType: container
#             dockerImageName: 'jussihailu/prime-football_post-service'
#             dockerfilePath: 'post-service/Dockerfile'
#             monitorWhen: always
#             failOnIssues: true

- stage: 
  displayName: OWASP scan
  pool:
    vmImage: 'ubuntu-latest'
  jobs:
    - job:
      displayName: Generate Owasp report
      steps:
        - checkout: self
        - bash: docker run -d -p 80:8080 jussihailu/prime-football_post-service
          displayName: 'Run post-service container'
        - task: owaspzap@1
          inputs:
            aggressivemode: true
        
        - bash: |
            sudo npm install -g handlebars-cmd

            cat <<EOF > owaspzap/nunit-template.hbs

            <test-run
                id="2"
                name="Owasp test"
                start-time="{{@generated}}">
                {{#each site}}<test-suite
                    id="{{@index}}"
                    type="Assembly"
                    name="{{[@name]}}"
                    result="Failed"
                    failed="{{alerts.length}}">
                    <attachments>
                        <attachment>
                            <filePath>$BUILD_SOURCESDIRECTORY/owaspzap/report.html</filePath>
                        </attachment>
                    </attachments>
                    {{#each alerts}}<test-case
                        id="{{@index}}"
                        name="{{alert}}"
                        result="Failed"
                        fullname="{{alert}}"
                        time="1">
                        <failure>
                            <message>
                                <![CDATA[{{{desc}}}]]>
                            </message>
                            <stack-trace>
                                <![CDATA[
            Solution:
            {{{solution}}}

            Reference:
            {{{reference}}}

            instances:{{#each instances}}
            * {{uri}}
                - {{method}}
                {{#if evidence}}- {{{evidence}}}{{/if}}
                                {{/each}}]]>
                            </stack-trace>
                        </failure>
                    </test-case>
                    {{/each}}
                </test-suite>
                {{/each}}
            </test-run>
            EOF
          displayName: 'OWASP NUnit template'

        - bash: ' handlebars owaspzap/report.json < owaspzap/nunit-template.hbs > owaspzap/test-results.xml'
          displayName: 'generate nunit type file'
          condition: always()

        - task: PublishTestResults@2
          displayName: 'Publish Test Results **/TEST-*.xml'
          inputs:
            testResultsFormat: NUnit
            testResultsFiles: 'owaspzap/test-results.xml'
          condition: always()

        - task: CopyFiles@2
          condition: always()
          inputs:
            SourceFolder: 'owaspzap/'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishBuildArtifacts@1
          condition: always()
          inputs:
            ArtifactName: 'owasp_zap_reports'

